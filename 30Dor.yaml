_include:
  - (quartical)stimela_cabs.yaml
  # - (pfb)stimela_cabs.yaml



opts:
  log:
    dir: logs
    nest: 2
  backend:
    select: native


1GC:
  name: 1gc
  info: First generation calibration using QuartiCal

  assign:
    ms_cals: /data7/lbester/30Dor/msdir/1530927060_sdp_l0_1284.full_pol.ms
    ms_target: /data7/lbester/30Dor/msdir/1530927060_sdp_l0_1284.full_pol.ms

  inputs:
    basedir:
      dtype: str
      info: Location to write gain table
    model-column:
      dtype: str
      default: MODEL_DATA


  steps:
    kgb:
      cab: quartical
      info: GKB on the primary where
            G = time variable complex gain,
            K = per scan delay
            B = frequency variable complex gain (bandpass)
      params:
        input_ms.path: =recipe.ms_cals
        input_ms.time_chunk: 0
        input_ms.freq_chunk: 0
        input_ms.select_uv_range: [0,150]
        input_ms.group_by: [FIELD_ID,DATA_DESC_ID, SCAN_NUMBER]
        input_ms.select_fields: [0]
        input_model.recipe: '{recipe.model-column}'
        input_model.apply_p_jones: false
        solver.terms: [G,K,B]
        solver.iter_recipe: [50,50,50,25,25,25,15,15,15,5,5,5]
        solver.propagate_flags: true
        solver.robust: true
        solver.threads: 32
        solver.reference_antenna: 2
        output.gain_directory: '{recipe.basedir}/gkb_coarse_binf.qc'
        output.log_directory: '{recipe.basedir}/'
        output.overwrite: true
        # output.products: [corrected_data, corrected_weight]
        # output.columns: [CORRECTED_DATA_QCAL, WEIGHT_SPECTRUM]
        output.flags: true
        output.apply_p_jones_inv: false
        output.net_gains: [G,K,B]
        mad_flags.enable: true
        mad_flags.threshold_bl: 7.5
        mad_flags.threshold_global: 0
        mad_flags.max_deviation: 0
        dask.threads: 2
        dask.scheduler: threads
        G.type: diag_complex
        G.time_interval: 0
        G.freq_interval: 0
        K.type: delay
        K.time_interval: 0
        K.freq_interval: 0
        K.initial_estimate: true
        B.type: complex
        B.time_interval: 0
        B.freq_interval: 32
        B.respect_scan_boundaries: false
        # P.type: parallactic_angle
        # P.time_interval: 1
        # P.freq_interval: 0

    # convert G to abs
    g_to_abs:
      cab: G2abs
      info: Replace G with abs(G) since we won't need the phase again
      params:
        source: '{recipe.basedir}/gkb_coarse_binf.qc/G'

    # crosshand_phase:
    #   cab: quartical
    #   info: Crosshand phase on the polcal
    #   params:
    #     input_ms.path: =recipe.ms_cals
    #     input_ms.time_chunk: 0
    #     input_ms.freq_chunk: 0
    #     input_ms.select_uv_range: [0,0]
    #     input_ms.group_by: [FIELD_ID,DATA_DESC_ID]
    #     input_ms.select_fields: [0]
    #     input_model.recipe: '{recipe.model-column}'  # double check what's in here
    #     input_model.apply_p_jones: false
    #     solver.terms: [G, K, B, D, C, P]
    #     solver.iter_recipe: [0, 0, 0, 100, 100, 0]
    #     solver.propagate_flags: false
    #     solver.robust: true
    #     solver.threads: 32
    #     solver.reference_antenna: 2
    #     output.gain_directory: '{recipe.basedir}/crosshand_phase.qc'
    #     output.log_directory: '{recipe.basedir}/'
    #     output.overwrite: true
    #     # output.products: [corrected_data, corrected_weight]
    #     # output.columns: [CORRECTED_DATA_QCAL, WEIGHT_SPECTRUM]
    #     output.flags: false
    #     output.apply_p_jones_inv: false
    #     output.net_gains: [[G,K,B,D,C,P],[G,K,B,D,C]]
    #     mad_flags.enable: false
    #     mad_flags.threshold_bl: 5.5
    #     mad_flags.threshold_global: 0
    #     mad_flags.max_deviation: 0
    #     dask.threads: 2
    #     dask.scheduler: threads
    #     G.type: diag_complex
    #     G.time_interval: 1
    #     G.freq_interval: 0
    #     G.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/Ga'
    #     G.interp_mode: amp
    #     K.type: delay
    #     K.time_interval: 1
    #     K.freq_interval: 0
    #     K.initial_estimate: false
    #     K.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/K'
    #     B.type: complex
    #     B.time_interval: 0
    #     B.freq_interval: 1
    #     B.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/B'
    #     D.type: delay_and_offset
    #     D.time_interval: 0
    #     D.freq_interval: 0
    #     D.initial_estimate: false
    #     C.type: crosshand_phase_null_v
    #     C.solve_per: array
    #     C.time_interval: 0
    #     C.freq_interval: 256
    #     C.respect_scan_boundaries: false
    #     P.type: parallactic_angle
    #     P.time_interval: 1
    #     P.freq_interval: 0

    phasecal:
      cab: quartical
      info: Delay and offset on the secondary
      params:
        input_ms.path: =recipe.ms_cals
        input_ms.time_chunk: 0
        input_ms.freq_chunk: 0
        input_ms.select_uv_range: [0,0]
        input_ms.group_by: [FIELD_ID,DATA_DESC_ID,SCAN_NUMBER]
        input_ms.select_fields: [1]
        input_model.recipe: '{recipe.model-column}'
        input_model.apply_p_jones: false
        solver.terms: [G, K, B, D, P]
        solver.iter_recipe: [0, 0, 0, 100, 0]
        solver.propagate_flags: false
        solver.robust: false
        solver.threads: 2
        solver.reference_antenna: 2
        output.gain_directory: '{recipe.basedir}/delay_and_offset.qc'
        output.log_directory: '{recipe.basedir}/'
        output.overwrite: true
        # output.products: [corrected_data, corrected_weight]
        # output.columns: [CORRECTED_DATA_QCAL, WEIGHT_SPECTRUM]
        output.flags: false
        output.apply_p_jones_inv: false
        output.net_gains: [G,K,B,D]
        mad_flags.enable: false
        dask.threads: 16
        dask.scheduler: threads
        G.type: diag_complex  #amp
        G.time_interval: 1
        G.freq_interval: 0
        G.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/Ga'
        K.type: delay
        K.time_interval: 1
        K.freq_interval: 0
        K.initial_estimate: false
        K.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/K'
        B.type: complex
        B.time_interval: 0
        B.freq_interval: 1
        B.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/B'
        D.type: delay_and_offset  # phase to target
        D.time_interval: 0
        D.freq_interval: 0
        D.initial_estimate: false
        # P.type: parallactic_angle
        # P.time_interval: 1
        # P.freq_interval: 0

    transfer:
      cab: quartical
      info: Transfer solutions to target field
      params:
        input_ms.path: =recipe.ms_target
        input_ms.time_chunk: 0
        input_ms.freq_chunk: 256
        input_ms.select_uv_range: [0,0]
        input_ms.group_by: [FIELD_ID,DATA_DESC_ID,SCAN_NUMBER]
        input_ms.select_fields: [2]
        input_ms.sigma_column: SIGMA_SPECTRUM
        input_model.apply_p_jones: false
        solver.terms: [G, K, B, D, P]
        solver.iter_recipe: [0, 0, 0, 0, 0]
        solver.propagate_flags: false
        solver.robust: false
        solver.threads: 2
        solver.reference_antenna: 2
        output.gain_directory: '{recipe.basedir}/target_init.qc'
        output.log_directory: '{recipe.basedir}/'
        output.overwrite: true
        # output.products: [corrected_data, corrected_weight]
        # output.columns: [CORRECTED_DATA_QCAL, WEIGHT_SPECTRUM]
        output.flags: false
        output.apply_p_jones_inv: false
        output.net_gains: [[G,K,B,D,P],[G,K,B,D]]
        mad_flags.enable: false
        dask.threads: 16
        dask.scheduler: threads
        G.type: diag_complex  #amp
        G.time_interval: 1
        G.freq_interval: 0
        G.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/Ga'
        G.interp_mode: amp
        K.type: delay
        K.time_interval: 1
        K.freq_interval: 0
        K.initial_estimate: false
        K.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/K'
        B.type: complex
        B.time_interval: 0
        B.freq_interval: 1
        B.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/B'
        # C.type: crosshand_phase_null_v
        # C.time_interval: 0
        # C.freq_interval: 1
        # C.load_from: '{recipe.basedir}/crosshand_phase.qc/C'
        D.type: delay_and_offset  # phase to target
        D.time_interval: 1
        D.freq_interval: 0
        D.initial_estimate: false
        D.load_from: '{recipe.basedir}/delay_and_offset.qc/D'
        # P.type: parallactic_angle  # not tracking non-sidereal source
        # P.time_interval: 1
        # P.freq_interval: 0


# movie:
#   name: movie
#   info: Make movies of the calibrated data

#   assign:
#     output-filename: '{recipe.basedir}/{recipe.obs}/stage0'
#     fits-output-folder: '{recipe.basedir}/{recipe.obs}/fits'
#     log-directory: '{recipe.basedir}/{recipe.obs}/logs'

#   aliases:
#     output-filename: '*.output-filename'
#     fits-output-folder: '*.fits-output-folder'
#     log-directory: '*.log-directory'
#     nworkers: '*.nworkers'
#     nthreads: '*.nthreads'

#   inputs:
#     ms:
#       dtype: URI
#       required: true
#       info:
#         Path to MS
#     gain-table:
#       dtype: URI
#       info:
#         Path to QuartiCal gain table
#     product:
#       dtype: str
#       default: I
#       info:
#         Stokes parameter to image
#     integrations-per-image:
#       dtype: int
#       default: 1
#       info:
#         Number of time integrations per image
#     channels-per-image:
#       dtype: int
#       default: -1
#       info:
#         Number of frequency channels per image
#     data-column:
#       dtype: str
#       default: DATA
#       info:
#         Name of column to image
#     robustness:
#       dtype: float
#       default: -1.5
#       info:
#         Robustness value of Briggs weighting scheme
#     output-format:
#       dtype: float
#       default: zarr
#       info:
#         Output images as fits or zarr
#     field-of-view:
#       dtype: float
#       default: 1.2
#       info:
#         Field of view to image
#     super-resolution-factor:
#       dtype: float
#       default: 1.2
#       info:
#         Factor to over-sample Nyquist by
#     overwrite:
#       dtype: bool
#       default: false
#       info:
#         Allow overwriting output 
#     fps:
#       dtype: int
#       default: 8
#       info:
#         Number of frames per second
#     nworkers:
#       dtype: int
#       default: 4
#       info:
#         Number of Dask workers
#     nthreads:
#       dtype: int
#       default: 8
#       info:
#         Number of threads per Dask worker

#   steps:
#     image:
#       cab: pfb.hci
#       info: Make high cadence images
#       params:
#         ms: =recipe.ms
#         product: =recipe.product
#         output-format: =recipe.output-format
    
#     movie:
#       cab: pfb.smoovie
#       info: Render images to movie
#       params:
#         product: =recipe.product
#         fps: =recipe.fps


selfcal:
  name: Lunocal
  info: Self-calibration

  assign_based_on:
    obs:
      'cals':
        ms: /home/bester/projects/MOON/l.ms
      'luno':
        ms: /home/bester/projects/MOON/l_moon.ms

  inputs:
    obs:
      default: sgra
      choices: ['sgra','gcx17','gcx30']
    data-column:
      default: DATA
    sigma-column:
      default: SIGMA_SPECTRUM
      info: Original std of noise used to construct weights
    model-column:
      dtype: str
      default: MODEL_DATA_PFB
    nthreads:
      dtype: int
      default: 32
    overwrite:
      dtype: bool
      default: false
    tint:
      dtype: int
      default: 1
      info:
        Time solution interval for delay_and_offset

  steps:
    selfcal1:
      cab: quartical
      info: Perform a round of phase + delay selfcal + MAD flagging
      params:
        input_ms.path: '{recipe.ms}'
        input_ms.data_column: =recipe.data-column
        # input_ms.sigma_column:   #=recipe.sigma-column
        input_ms.time_chunk: 28
        input_ms.freq_chunk: 0
        input_ms.select_uv_range: [0,0]
        input_ms.group_by: [SCAN_NUMBER,FIELD_ID,DATA_DESC_ID]
        input_ms.select_corr: [0, 3]
        input_model.recipe: =recipe.model-column
        input_model.apply_p_jones: false
        solver.terms: [K]
        solver.iter_recipe: [50,30,20,10,5]
        solver.propagate_flags: true
        solver.robust: true
        solver.threads: 2
        solver.reference_antenna: 2
        output.gain_directory: 'output/gains/{recipe.obs}/stage1.qc'
        output.log_directory: 'output/{recipe.obs}/logs.qc'
        output.overwrite: =recipe.overwrite
        output.products: [residual]
        output.columns: [RESIDUAL]
        output.flags: true
        output.apply_p_jones_inv: false
        output.net_gains: [K]
        mad_flags.enable: true
        mad_flags.whitening: native
        mad_flags.threshold_bl: 5.5
        mad_flags.threshold_global: 0
        mad_flags.max_deviation: 0
        dask.threads: 24
        dask.scheduler: threads
        K.type: delay_and_offset
        K.interp_method: 2dlinear
        K.interp_mode: ampphase
        K.time_interval: =recipe.tint
        K.freq_interval: 0
        K.initial_estimate: false



cabs:
  G2abs:
    name: G2abs
    flavour: python-code
    backend:
      select: native
      native:
        virtual_env: ~/.venv/pfbn
    command: |
      import dask
      import dask.array as da
      from daskms.experimental.zarr import xds_to_zarr, xds_from_zarr
      gain_table = '::'.join(source.rsplit('/', 1))
      G = xds_from_zarr(gain_table)
      for g in G:
        g['gains'] = (g.gains.dims, da.abs(g.gains.data))
      abs_gain_table = gain_table.rstrip('G') + 'Ga'
      print(f'Writing to {abs_gain_table}')
      writes = xds_to_zarr(G, abs_gain_table)
      dask.compute(writes)
      print('Done')

      
    inputs:
      source:
        info: The location to fetch G term from
        dtype: URI
        required: true

    outputs:
      {}