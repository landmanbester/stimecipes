_include:
  - (quartical)stimela_cabs.yaml
  # - (pfb)stimela_cabs.yaml



opts:
  log:
    dir: logs
    nest: 2
  backend:
    select: native


1GC:
  name: 1gc
  info: First generation calibration using QuartiCal

  assign:
    ms: /data7/lbester/30Dor/msdir/1530927060_sdp_l0_1284.full_pol.ms

  inputs:
    basedir:
      dtype: str
      info: Location to write gain table
    model-column:
      dtype: str
      default: MODEL_DATA
    ref-ant:
      dtype: int
      default: 43


  steps:
    kg1:
      cab: quartical
      info: GK round 1 on the primary where
            G = time variable complex gain,
            K = per scan delay
      params:
        input_ms.path: =recipe.ms
        input_ms.time_chunk: 0
        input_ms.freq_chunk: 0
        input_ms.select_uv_range: [150,0]
        input_ms.group_by: [FIELD_ID,DATA_DESC_ID, SCAN_NUMBER]
        input_ms.select_fields: [0]
        input_model.recipe: '{recipe.model-column}'
        input_model.apply_p_jones: false
        solver.terms: [G,K]
        solver.iter_recipe: [50,150,25,25,15,15,5,5,5,5]
        solver.propagate_flags: false
        solver.robust: true
        solver.threads: 7
        solver.reference_antenna: =recipe.ref-ant
        output.gain_directory: '{recipe.basedir}/kg1.qc'
        output.log_directory: '{recipe.basedir}/'
        output.overwrite: true
        output.flags: false
        output.apply_p_jones_inv: false
        output.net_gains: 
        mad_flags.enable: false
        dask.threads: 9
        dask.scheduler: threads
        G.type: diag_complex
        G.time_interval: 0
        G.freq_interval: 0
        K.type: delay
        K.time_interval: 0
        K.freq_interval: 0
        K.initial_estimate: true

    # convert G to abs and combine angle(G) into K
    KG_to_DGa:
      cab: KG2DGa
      info: Replace G with abs(G) and combine angle(G) with K to make a delay_and_offset term
      params:
        sourceG: '{recipe.basedir}/kg1.qc/G'
        sourceK: '{recipe.basedir}/kg1.qc/K'

    b1:
      cab: quartical
      info: Bandpass given G and K round 1 where 
            G = diagonal time variable complex gain,
            K = delay
            B = frequency variable complex 2x2 gain (bandpass + leakage)
      params:
        input_ms.path: =recipe.ms
        input_ms.time_chunk: 0
        input_ms.freq_chunk: 128
        input_ms.select_uv_range: [150,0]
        input_ms.group_by: [FIELD_ID,DATA_DESC_ID]
        input_ms.select_fields: [0]
        input_model.recipe: '{recipe.model-column}'
        input_model.apply_p_jones: false
        solver.terms: [G,D,B]
        solver.iter_recipe: [0,0,50,0,0,25,0,0,15,0,0,5,0,0,5]
        solver.propagate_flags: false
        solver.robust: true
        solver.threads: 2
        solver.reference_antenna: =recipe.ref-ant
        output.gain_directory: '{recipe.basedir}/b1.qc'
        output.log_directory: '{recipe.basedir}/'
        output.overwrite: true
        output.flags: false
        output.apply_p_jones_inv: false
        output.net_gains:
        mad_flags.enable: false
        mad_flags.threshold_bl: 12
        mad_flags.threshold_global: 0
        mad_flags.max_deviation: 0
        dask.threads: 32
        dask.scheduler: threads
        G.type: amplitude
        G.time_interval: 5
        G.freq_interval: 0
        G.load_from: '{recipe.basedir}/kg1.qc/Ga'
        D.type: delay_and_offset
        D.time_interval: 5
        D.freq_interval: 0
        D.initial_estimate: false
        D.load_from: '{recipe.basedir}/kg1.qc/D'
        B.type: complex
        B.time_interval: 0
        B.freq_interval: 16
        B.respect_scan_boundaries: false

    # Need a step to zero bandpass slopes

    kg2:
      cab: quartical
      info: GK round 2 on the primary where
            G = time variable complex gain,
            K = delay
            B = frequency variable complex 2x2 gain (bandpass + leakage)
      params:
        input_ms.path: =recipe.ms
        input_ms.time_chunk: 0
        input_ms.freq_chunk: 0
        input_ms.select_uv_range: [150,0]
        input_ms.group_by: [FIELD_ID,DATA_DESC_ID, SCAN_NUMBER]
        input_ms.select_fields: [0]
        input_model.recipe: '{recipe.model-column}'
        input_model.apply_p_jones: false
        solver.terms: [G,K,B]
        solver.iter_recipe: [50,150,0,25,25,0,15,15,0,5,5,0,5,5,0]
        solver.propagate_flags: false
        solver.robust: true
        solver.threads: 7
        solver.reference_antenna: =recipe.ref-ant
        output.gain_directory: '{recipe.basedir}/kg2.qc'
        output.log_directory: '{recipe.basedir}/'
        output.overwrite: true
        output.flags: true
        output.apply_p_jones_inv: false
        mad_flags.enable: true
        mad_flags.threshold_bl: 10
        mad_flags.threshold_global: 0
        mad_flags.max_deviation: 0
        dask.threads: 9
        dask.scheduler: threads
        G.type: diag_complex
        G.time_interval: 0
        G.freq_interval: 0
        G.load_from: '{recipe.basedir}/kg1.qc/G'
        K.type: delay
        K.time_interval: 0
        K.freq_interval: 0
        K.load_from: '{recipe.basedir}/kg1.qc/K'
        K.initial_estimate: false
        B.type: complex
        B.time_interval: 0
        B.freq_interval: 1
        B.load_from: '{recipe.basedir}/b1.qc/B'

    b2:
      cab: quartical
      info: Bandpass given G and K round 2 where 
            G = diagonal time variable complex gain,
            K = delay
            B = frequency variable complex 2x2 gain (bandpass + leakage)
      params:
        input_ms.path: =recipe.ms
        input_ms.time_chunk: 0
        input_ms.freq_chunk: 128
        input_ms.select_uv_range: [150,0]
        input_ms.group_by: [FIELD_ID,DATA_DESC_ID]
        input_ms.select_fields: [0]
        input_model.recipe: '{recipe.model-column}'
        input_model.apply_p_jones: false
        solver.terms: [G,K,B]
        solver.iter_recipe: [0,0,50,0,0,25,0,0,15,0,0,5,0,0,5]
        solver.propagate_flags: false
        solver.robust: true
        solver.threads: 2
        solver.reference_antenna: =recipe.ref-ant
        output.gain_directory: '{recipe.basedir}/b2.qc'
        output.log_directory: '{recipe.basedir}/'
        output.overwrite: true
        output.products: [corrected_data, corrected_weight]
        output.columns: [CORRECTED_DATA_QCAL, WEIGHT_SPECTRUM]
        output.flags: true
        output.apply_p_jones_inv: false
        output.net_gains: [G,K,B]
        mad_flags.enable: true
        mad_flags.threshold_bl: 8
        mad_flags.threshold_global: 0
        mad_flags.max_deviation: 0
        dask.threads: 32
        dask.scheduler: threads
        G.type: diag_complex
        G.time_interval: 5
        G.freq_interval: 0
        G.load_from: '{recipe.basedir}/kg2.qc/G'
        K.type: delay
        K.time_interval: 5
        K.freq_interval: 0
        K.initial_estimate: false
        K.load_from: '{recipe.basedir}/kg2.qc/K'
        B.type: complex
        B.time_interval: 0
        B.freq_interval: 8
        B.respect_scan_boundaries: false
        B.load_from: '{recipe.basedir}/b1.qc/B'


    secondary_amplitude:
      cab: quartical
      info: Solve for a global amplitude assuming unity model
            This should approximate the spectrum of the secondary
      params:
        input_ms.path: =recipe.ms
        input_ms.time_chunk: 0
        input_ms.freq_chunk: 128
        input_ms.select_uv_range: [0,0]
        input_ms.group_by: [FIELD_ID,DATA_DESC_ID]
        input_ms.select_fields: [1]
        input_model.apply_p_jones: false
        solver.terms: [G, K, B, A]
        solver.iter_recipe: [0, 0, 0, 100, 0, 0, 0, 50, 0, 0, 0, 25, 0, 0, 0, 10, 0, 0, 0, 10]
        solver.propagate_flags: false
        solver.robust: true
        solver.threads: 4
        solver.reference_antenna: =recipe.ref-ant
        output.gain_directory: '{recipe.basedir}/secondary_init_gloabl_amp.qc'
        output.log_directory: '{recipe.basedir}/'
        output.overwrite: true
        output.flags: false
        output.apply_p_jones_inv: false
        output.net_gains: [G,K,B,D]
        mad_flags.enable: false
        dask.threads: 16
        dask.scheduler: threads
        G.type: diag_complex  #amp
        G.time_interval: 1
        G.freq_interval: 0
        G.load_from: '{recipe.basedir}/kg2.qc/G'
        G.interp_mode: ampphase
        K.type: delay
        K.time_interval: 1
        K.freq_interval: 0
        K.initial_estimate: false
        K.load_from: '{recipe.basedir}/kg2.qc/K'
        K.interp_mode: ampphase
        B.type: complex
        B.time_interval: 0
        B.freq_interval: 1
        B.load_from: '{recipe.basedir}/b2.qc/B'
        B.interp_mode: ampphase
        A.type: amplitude
        A.solve_per: array
        A.time_interval: 0
        A.freq_interval: 128
        A.respect_scan_boundaries: false

    secondary_phase_refinement:
      cab: quartical
      info: Refine phase and delay given approximate spectrum of secondary 
      params:
        input_ms.path: =recipe.ms
        input_ms.time_chunk: 0
        input_ms.freq_chunk: 0
        input_ms.select_uv_range: [0,0]
        input_ms.group_by: [FIELD_ID,DATA_DESC_ID,SCAN_NUMBER]
        input_ms.select_fields: [1]
        input_model.apply_p_jones: false
        solver.terms: [G, K, B, A, D]
        solver.iter_recipe: [0, 0, 0, 0, 100, 0, 0, 0, 0, 50, 0, 0, 0, 0, 25, 0, 0, 0, 0, 10]
        solver.propagate_flags: false
        solver.robust: false
        solver.threads: 1
        solver.reference_antenna: =recipe.ref-ant
        output.gain_directory: '{recipe.basedir}/secondary_init_gloabl_amp.qc'
        output.log_directory: '{recipe.basedir}/'
        output.overwrite: true
        output.flags: false
        output.apply_p_jones_inv: false
        output.net_gains: [G,K,B,D]
        mad_flags.enable: false
        dask.threads: 64
        dask.scheduler: threads
        G.type: diag_complex  #amp
        G.time_interval: 1
        G.freq_interval: 0
        G.load_from: '{recipe.basedir}/kg2.qc/G'
        G.interp_mode: ampphase
        K.type: delay
        K.time_interval: 1
        K.freq_interval: 0
        K.initial_estimate: false
        K.load_from: '{recipe.basedir}/kg2.qc/K'
        K.interp_mode: ampphase
        B.type: complex
        B.time_interval: 0
        B.freq_interval: 1
        B.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/B'
        B.interp_mode: ampphase
        A.type: amplitude
        A.solve_per: array
        A.time_interval: 0
        A.freq_interval: 128
        D.type: delay_and_offset
        D.time_interval: 0
        D.freq_interval: 0
        D.initial_estimate: false


    ####################################### REFINE #################################################
    phasecal:
      cab: quartical
      info: Delay and offset on the secondary
      params:
        input_ms.path: =recipe.ms
        input_ms.time_chunk: 0
        input_ms.freq_chunk: 0
        input_ms.select_uv_range: [0,0]
        input_ms.group_by: [FIELD_ID,DATA_DESC_ID,SCAN_NUMBER]
        input_ms.select_fields: [1]
        input_model.recipe: '{recipe.model-column}'
        input_model.apply_p_jones: false
        solver.terms: [G, K, B, D]
        solver.iter_recipe: [0, 0, 0, 0, 100]
        solver.propagate_flags: false
        solver.robust: false
        solver.threads: 2
        solver.reference_antenna: =recipe.ref-ant
        output.gain_directory: '{recipe.basedir}/delay_and_offset.qc'
        output.log_directory: '{recipe.basedir}/'
        output.overwrite: true
        # output.products: [corrected_data, corrected_weight]
        # output.columns: [CORRECTED_DATA_QCAL, WEIGHT_SPECTRUM]
        output.flags: false
        output.apply_p_jones_inv: false
        output.net_gains: [G,K,B,D]
        mad_flags.enable: false
        dask.threads: 16
        dask.scheduler: threads
        G.type: diag_complex  #amp
        G.time_interval: 1
        G.freq_interval: 0
        G.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/Ga'
        K.type: delay
        K.time_interval: 1
        K.freq_interval: 0
        K.initial_estimate: false
        K.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/K'
        B.type: complex
        B.time_interval: 0
        B.freq_interval: 1
        B.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/B'
        D.type: delay_and_offset  # phase to target
        D.time_interval: 0
        D.freq_interval: 0
        D.initial_estimate: false
        # P.type: parallactic_angle
        # P.time_interval: 1
        # P.freq_interval: 0

    transfer:
      cab: quartical
      info: Transfer solutions to target field
      params:
        input_ms.path: =recipe.ms_target
        input_ms.time_chunk: 0
        input_ms.freq_chunk: 256
        input_ms.select_uv_range: [0,0]
        input_ms.group_by: [FIELD_ID,DATA_DESC_ID,SCAN_NUMBER]
        input_ms.select_fields: [2]
        input_ms.sigma_column: SIGMA_SPECTRUM
        input_model.apply_p_jones: false
        solver.terms: [G, K, B, D]
        solver.iter_recipe: [0, 0, 0, 0, 0]
        solver.propagate_flags: false
        solver.robust: false
        solver.threads: 2
        solver.reference_antenna: =recipe.ref-ant
        output.gain_directory: '{recipe.basedir}/target_init.qc'
        output.log_directory: '{recipe.basedir}/'
        output.overwrite: true
        # output.products: [corrected_data, corrected_weight]
        # output.columns: [CORRECTED_DATA_QCAL, WEIGHT_SPECTRUM]
        output.flags: false
        output.apply_p_jones_inv: false
        output.net_gains: [G,K,B,D]
        mad_flags.enable: false
        dask.threads: 16
        dask.scheduler: threads
        G.type: diag_complex  #amp
        G.time_interval: 1
        G.freq_interval: 0
        G.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/Ga'
        G.interp_mode: amp
        K.type: delay
        K.time_interval: 1
        K.freq_interval: 0
        K.initial_estimate: false
        K.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/K'
        B.type: complex
        B.time_interval: 0
        B.freq_interval: 1
        B.load_from: '{recipe.basedir}/gkb_coarse_binf.qc/B'
        # C.type: crosshand_phase_null_v
        # C.time_interval: 0
        # C.freq_interval: 1
        # C.load_from: '{recipe.basedir}/crosshand_phase.qc/C'
        D.type: delay_and_offset  # phase to target
        D.time_interval: 1
        D.freq_interval: 0
        D.initial_estimate: false
        D.load_from: '{recipe.basedir}/delay_and_offset.qc/D'
        # P.type: parallactic_angle  # not tracking non-sidereal source
        # P.time_interval: 1
        # P.freq_interval: 0


selfcal:
  name: Tarantuala selfcal
  info: Self-calibration

  assign:
    ms-target: /home/bester/projects/30Dor/msdir/Tarantula_HI_8s4ch.ms

  inputs:
    data-column:
      default: DATA
    model-column:
      dtype: str
      default: MODEL_DATA_MOPPED
    overwrite:
      dtype: bool
      default: false
    tint:
      dtype: int
      default: 5
      info:
        Time solution interval for delay_and_offset
    ref-ant:
      dtype: int
      default: 43

  steps:
    selfcal1:
      cab: quartical
      info: Perform a round of phase + delay selfcal + MAD flagging
      params:
        input_ms.path: =recipe.ms-target
        input_ms.data_column: =recipe.data-column
        # input_ms.sigma_column:   #=recipe.sigma-column
        input_ms.time_chunk: 50
        input_ms.freq_chunk: 512
        input_ms.select_uv_range: [150,0]
        input_ms.group_by: [SCAN_NUMBER,FIELD_ID,DATA_DESC_ID]
        input_ms.select_corr: [0, 3]
        input_model.recipe: =recipe.model-column
        input_model.apply_p_jones: false
        solver.terms: [K,G]
        solver.iter_recipe: [150,50,20,10,5]
        solver.propagate_flags: true
        solver.robust: true
        solver.threads: 2
        solver.reference_antenna: =recipe.ref-ant
        output.gain_directory: 'outputs/{recipe.data-column}_{recipe.model-column}_selfcal1.qc'
        output.log_directory: 'output/logs/logs.qc'
        output.overwrite: =recipe.overwrite
        output.products: [corrected_residual]
        output.columns: [CORRECTED_RESIDUAL_MOPPED]
        output.flags: true
        output.apply_p_jones_inv: false
        output.net_gains: [K]
        mad_flags.enable: true
        mad_flags.threshold_bl: 9.5
        mad_flags.threshold_global: 0
        mad_flags.max_deviation: 0
        dask.threads: 24
        dask.scheduler: threads
        K.type: delay_and_offset
        K.interp_method: 2dlinear
        K.interp_mode: ampphase
        K.time_interval: =recipe.tint
        K.freq_interval: 0
        K.initial_estimate: true
        G.type: diag_complex
        G.interp_method: 2dlinear
        G.interp_mode: ampphase
        G.time_interval: 25
        G.freq_interval: 128
        G.initial_estimate: false



cabs:
  KG2DGa:
    name: KG2GDa
    flavour: python-code
    backend:
      select: native
      native:
        virtual_env: ~/.venv/pfb
    command: |
      import numpy as np
      import dask
      import dask.array as da
      from daskms.experimental.zarr import xds_to_zarr, xds_from_zarr

      sourceG = '/data7/lbester/30Dor/outputs/kg2.qc/G'
      sourceK = '/data7/lbester/30Dor/outputs/kg2.qc/K'

      G_table = '::'.join(sourceG.rsplit('/', 1))
      K_table = '::'.join(sourceK.rsplit('/', 1))
      G = xds_from_zarr(G_table)
      K = xds_from_zarr(K_table)
      Ga = []
      D = []
      for g, k in zip(G,K):
          assert g.SCAN_NUMBER == k.SCAN_NUMBER
          assert g.FIELD_ID == k.FIELD_ID
          assert g.DATA_DESC_ID == k.DATA_DESC_ID 
          amplitudes = da.abs(g.gains.data)
          phases = da.angle(g.gains.data)
          ga = g.assign_coords({'param_freq': (('param_freq',), g.gain_freq.values),
                                      'param_time': (('param_time',), g.gain_time.values),
                                      'param_name': (('param_name',), np.array(['amplitude_XX', 'amplitude_YY'], dtype='<U12'))})
          ga = ga.assign({'gains': (g.gains.dims, amplitudes),
                          'params': (('param_time', 'param_freq', 'antenna', 'direction', 'param_name'), da.take(amplitudes, [0, -1], axis=-1)),
                          'param_flags': (('param_time', 'param_freq', 'antenna', 'direction'), g.gain_flags.data)})
          ga = ga.assign_attrs({'TYPE': 'amplitude'})
          Ga.append(ga)

          delay = k.params.data
          off_xx = phases[:, :, :, :, 0]
          off_yy = phases[:, :, :, :, -1]
          del_xx = delay[:, :, :, :, 0]
          del_yy = delay[:, :, :, :, -1]
          params = da.stack((off_xx, del_xx, off_yy, del_yy), axis=-1)
          gains = k.gains.data * da.exp(1.0j*phases)
          pnames = np.array(['phase_offset_XX', 'delay_XX', 'phase_offset_YY', 'delay_YY'], dtype='<U15')
          pfreq = k.param_freq.values
          ptime = k.param_time.values
          # drop params to avoid conflicts
          d = k.drop_vars(['params', 'param_flags'])
          d = d.drop_dims(['param_freq', 'param_name', 'param_time'])
          d = d.assign_coords({'param_freq': (('param_freq',), k.param_freq.values),
                              'param_time': (('param_time',), k.param_time.values),
                              'param_name': (('param_name',), pnames)})
          d = d.assign({'gains': (k.gains.dims, gains),
                        'params': (('param_time', 'param_freq', 'antenna', 'direction', 'param_name'), params),
                        'param_flags': (('param_time', 'param_freq', 'antenna', 'direction'), k.param_flags.data)})  # Need to or flags?
          par_spec = k.PARAM_SPEC
          par_spec[-1] = [4]  # 2 -> 4 correlations
          d = d.assign_attrs({'TYPE': 'delay_and_offset',
                              'PARAM_AXES': ['param_time', 'param_freq', 'antenna', 'direction', 'param_name'],
                              'PARAM_SPEC': par_spec})
          D.append(d)

          Ga_table = G_table.rstrip('G') + 'Ga'
          D_table = K_table.rstrip('K') + 'D'
      print(f'Writing amplitudes to {Ga_table}')
      print(f'Writing delay_and_offtset to {D_table}')
      writes = []
      writes.append(xds_to_zarr(G, Ga_table))
      writes.append(xds_to_zarr(D, D_table))
      dask.compute(writes)
      print('Done')

      
    inputs:
      sourceG:
        info: The location to fetch G term from
        dtype: URI
        required: true
      sourceK:
        info: The location to fetch K term from
        dtype: URI
        required: true

    outputs:
      {}